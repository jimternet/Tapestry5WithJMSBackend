name: üèóÔ∏è Legacy Build CI (Baseline)

on:
  push:
    branches: [ master, main, add-ci-* ]
  pull_request:
    branches: [ master, main ]

jobs:
  legacy-build:
    name: üï∞Ô∏è Legacy Build (Java ${{ matrix.java }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test multiple Java versions to see what actually works
        java: [8, 11, 17]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-legacy-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-legacy-m2
        
    - name: üìã Display Build Environment
      run: |
        echo "=== Build Environment ===" 
        echo "Java Version: $(java -version 2>&1 | head -1)"
        echo "Maven Version: $(mvn -version | head -1)"
        echo "OS: $(uname -a)"
        echo ""
        echo "=== Legacy Dependencies to Build ==="
        echo "- Tapestry 5.2.5 (2011)"
        echo "- Spring 3.0.5.RELEASE (2011)" 
        echo "- ActiveMQ 5.4.2 (2010)"
        echo "- Java target: 1.5 (2004)"
        echo ""
        
    - name: üîç Analyze POM Dependencies
      run: |
        echo "=== POM Analysis ==="
        if [ -f "pom.xml" ]; then
          echo "POM file found. Extracting key information:"
          echo ""
          echo "**Project Info:**"
          grep -A5 -B5 "<artifactId>" pom.xml | head -10 || echo "Could not extract project info"
          echo ""
          echo "**Java Target:**"
          grep -A2 -B2 "<source>" pom.xml || echo "No Java source version found"
          echo ""
          echo "**Key Dependencies:**"
          grep -A1 -B1 "<groupId>org.apache.tapestry</groupId>" pom.xml || echo "No Tapestry found"
          grep -A1 -B1 "<groupId>org.springframework</groupId>" pom.xml || echo "No Spring found"
          grep -A1 -B1 "<groupId>org.apache.activemq</groupId>" pom.xml || echo "No ActiveMQ found"
        else
          echo "No pom.xml found!"
          exit 1
        fi
        
    - name: üß™ Test Maven Configuration
      run: |
        echo "=== Testing Maven Configuration ==="
        mvn help:effective-pom -q | head -20 || echo "POM validation failed"
        
    - name: üì¶ Validate Dependencies
      run: |
        echo "=== Dependency Validation ==="
        mvn dependency:tree -DoutputType=text || echo "Dependency tree failed"
        
    - name: üèóÔ∏è Compile Project  
      run: |
        echo "=== Compiling Legacy Project ==="
        mvn clean compile -B -X
        
    - name: üß™ Run Tests (if any)
      run: |
        echo "=== Running Tests ==="
        mvn test -B || echo "Tests failed or no tests found"
        
    - name: üì¶ Package WAR
      run: |
        echo "=== Creating WAR Package ==="
        mvn package -DskipTests -B
        
    - name: üìä Build Summary
      if: always()
      run: |
        echo "=== Build Summary for Java ${{ matrix.java }} ==="
        if [ -f "target/*.war" ]; then
          echo "‚úÖ WAR file created successfully:"
          ls -la target/*.war
        else
          echo "‚ùå No WAR file found in target/"
        fi
        
        if [ -d "target/classes" ]; then
          echo "‚úÖ Classes compiled successfully:"
          find target/classes -name "*.class" | wc -l | xargs echo "Class files:"
        else
          echo "‚ùå No compiled classes found"
        fi
        
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: legacy-build-artifacts-java-${{ matrix.java }}
        path: |
          target/*.war
          target/classes/
          target/surefire-reports/
        retention-days: 7

  analyze-legacy-dependencies:
    name: üìä Legacy Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: 8
        distribution: 'temurin'
        
    - name: üîç Deep Dependency Analysis
      run: |
        echo "=== Legacy Dependency Deep Dive ==="
        echo ""
        echo "**Security Vulnerability Scan (Legacy Mode):**"
        mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=0 || echo "Security scan completed with issues (expected for 2011 dependencies)"
        
        echo ""
        echo "**Dependency Age Analysis:**"
        mvn versions:display-dependency-updates || echo "Version check completed"
        
        echo ""
        echo "**Repository Availability Check:**"
        mvn dependency:resolve-sources -Dsilent=true || echo "Source resolution completed"
        
    - name: üìà Generate Dependency Report
      run: |
        echo "=== Dependency Report Generation ==="
        mvn site:site -DgenerateReports=true || echo "Site generation completed"
        
    - name: üì§ Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: legacy-dependency-analysis
        path: |
          target/dependency-check-report.html
          target/site/
          
  build-status:
    name: üì¢ Build Status Report
    runs-on: ubuntu-latest
    needs: [legacy-build, analyze-legacy-dependencies]
    if: always()
    steps:
    - name: Generate Status Report
      run: |
        echo "## üï∞Ô∏è Legacy Build Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This CI pipeline tests building the **legacy 2011 codebase** as-is:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.legacy-build.result }}" == "success" ]; then
          echo "‚úÖ **Legacy Build**: SUCCESS - The 14-year-old code still compiles!" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Legacy Build**: FAILED - Build issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.analyze-legacy-dependencies.result }}" == "success" ]; then
          echo "‚úÖ **Dependency Analysis**: SUCCESS - Analyzed legacy dependencies" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Dependency Analysis**: FAILED - Analysis issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Baseline Established" >> $GITHUB_STEP_SUMMARY
        echo "- **Purpose**: Document current working state before security upgrades" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies**: Tapestry 5.2.5, Spring 3.0.5, ActiveMQ 5.4.2 (all from 2010-2011)" >> $GITHUB_STEP_SUMMARY
        echo "- **Java Target**: 1.5 (compiled with modern Java for compatibility)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîÑ **Next Step**: Use this baseline to safely perform incremental security updates" >> $GITHUB_STEP_SUMMARY
